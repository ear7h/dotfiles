snippet \ldr "load local" b
	ldr	${1:r0}, [fp, $2_OFFSET]
$0
endsnippet

snippet \str "store local" b
	str	${1:r0}, [fp, $2_OFFSET]
$0
endsnippet

snippet \asn "assign" b
# assign $3 = $2
	mov	${1:r0}, $2
	str	$1, [fp, $3_OFFSET]

$0
endsnippet


snippet \mut "mutate aka load and store local" b
	ldr ${1:r0}, [fp, $2_OFFSET]	@ load local variable $2 into $1
	$0
	str	${1:r0}, [fp, $2_OFFSET]	@ store local variable $2
						@ with value from ${3:$1}
endsnippet

snippet \for "for loop" b
mov	${1:r0}, ${2:0}
	str	$1, [fp, ${3:ITER}_OFFSET]	@ initialize iteration var to ${4:$2}
	ldr	$1, [fp, $3_OFFSET]	@ get current value of $3
	cmp	$1, $5
	b$6	end_loop$7	@ oposite logic test with exit condition

loop_$7:
# Loop body

	$0

# End loop body

	ldr	$1, [fp, $3_OFFSET]	@ get itaration var
	${8:add}	$1, ${9:$1}, ${10: 1}	@ execute loop expression
	str	$1, [fp, $3_OFFSET]	@ store iteration var

	ldr	$1, [fp, $3_OFFSET]	@ gete iteration var back
	cmp	$1, $5
	b$11	loop_$7		@ positive logic test with exit condition
end_loop_$7
endsnippet


snippet \while "while looop" b
ldr	$1, [fp, $2_OFFSET]	@ get loop cond var $2
	cmp	$1, $3
	b$4	end_loop_$5	@ oposite logic test with exit condition

loop_$5:
# Loop body

	$0

# End loop body

	ldr	$1, [fp, $2_OFFSET]	@ get loop cond var
	cmp	$1, $3
	b$6	loop_$5		@ positive logic test with exit condition
end_loop_$5:
endsnippet

snippet \iff "if statement" b
	ldr	${1:r0}, [fp, $2_OFFSET]	@ get current value of $2
	cmp	$1, $3
	b$4	${6:end_if_$5}

	$0

end_if_$5:
endsnippet


snippet \if "if statement" b
	ldr	${1:r0}, [fp, $2_OFFSET]	@ get current value of $2
	cmp	$1, $3
	b$4	${5: else_if}

	$0

$5:
endsnippet



